# indicate these are not file related, and instead are scripts
.PHONY: controller clean

# program the FPGA with the memory controller
# run the python code for interfacing with BRAM on the FPGA
controller: temp/controller.bin
	iceprog temp/controller.bin
	python3 src_python/shell.py

# submodules for our memory controller
helper_verilog := src_verilog/receiver.v src_verilog/transmiter.v src_verilog/controller.v
bram_insts := src_verilog/explicit_bram.v src_verilog/implicit_bram.v

temp/controller.bin: $(helper_verilog) $(bram_insts) src_verilog/integrated_memory_controller.v temp/data.hex 
# synthesis
# -p : run the following yosys subcommands
# -q : only print warnings and errors
# yosys interprets the last verilog file listed as the top module
	if [ "$(bram)" = "implicit" ]; then \
		yosys -q -p 'synth_ice40 -json temp/controller.json' \
		$(helper_verilog) src_verilog/implicit_bram.v src_verilog/integrated_memory_controller.v; \
	elif [ "$(bram)" = "explicit" ]; then \
		python3 src_python/generate_explicit_bram.py --n 16 --d hx1k --o temp/controller_generated_rams.vh; \
		yosys -q -D BRAM_INCLUDE_FILE="\"temp/controller_generated_rams.vh\"" -p 'synth_ice40 -json temp/controller.json' \
		$(helper_verilog) src_verilog/explicit_bram.v src_verilog/integrated_memory_controller.v; \
	fi

# place and route
# -q : only print warnings and errors
# --hx1k --package tq144 / --up5k --package sg48 : our device specs
# --asc : name of the asc file to generate
# --json : json file generated by synthesis
# --pcf : pin constraints file for i/o
	nextpnr-ice40 -q --hx1k --package tq144 --asc temp/controller.asc --json temp/controller.json --pcf constraints/hx1k.pcf

# convert ASCII bitstream to binary
	icepack temp/controller.asc temp/controller.bin

temp/data.hex:
	@if [ "$(bram)" = "implicit" ]; then \
		icebram -g -s 0 16 4096 > temp/data.hex; \
	elif [ "$(bram)" = "explicit" ]; then \
# each explicit bram block needs its only data file \
		mkdir -p temp/data; \
		touch temp/data.hex; \
		for i in `seq 0 15`; do \
			icebram -g -s $$i 16 256 > temp/data/$$i.hex; \
# concat all the files together so we have something in the same format as the implicit one \
			cat temp/data/$$i.hex >> temp/data.hex; \
		done; \
	fi

# make the temp directory if it does not already exist
temp:
	mkdir -p temp

# remove all files from the temp directory
clean:
	rm -rf temp/*