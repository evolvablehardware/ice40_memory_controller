# indicate these are not file related, and instead are scripts
.PHONY: controller demo debug clean

# program the FPGA with the memory controller
# run the python code for interfacing with BRAM on the FPGA
controller: temp/controller.bin
	iceprog temp/controller.bin
	python3 src_python/shell.py

# warmboot the FPGA with the controller and a demo circuit
# the demo circuit outputs a string of characters from BRAM
# run the python code for interfacing with BRAM on the FPGA
demo: temp/controller.bin temp/demo.bin
	icemulti -p0 temp/controller.bin temp/demo.bin  -o temp/full_demo.bin
	iceprog temp/full_demo.bin
	python3 src_python/shell.py

# warmbott the memeory controller with a circuit that
# outputs to serial the entire contents of bram
# run python code to store the output to file
debug: temp/controller.bin temp/debug.bin
	icemulti -p0 temp/controller.bin temp/debug.bin -o temp/full_debug.bin
	iceprog temp/full_debug.bin
	python3 src_python/shell.py

# submodules for our memory controller
helper_verilog := src_verilog/receiver.v src_verilog/transmiter.v src_verilog/bram.v

# python script for pnr
pnr_scripts := src_python/pre_place.py src_python/get_bram_locations.py

# data files for bram
hex_data := temp/data.hex temp/custom_data.hex

temp/controller.bin: $(helper_verilog) src_verilog/controller.v src_verilog/integrated_memory_controller.v $(pnr_scripts) $(hex_data) temp
# synthesis
# -p : run the following yosys subcommands
# -q : only print warnings and errors
# yosys interprets the last verilog file listed as the top module
	yosys -q -p 'synth_ice40 -json temp/controller.json' $(helper_verilog) src_verilog/controller.v src_verilog/integrated_memory_controller.v

# place and route
# -q : only print warnings and errors
# --hx1k --package tq144 : our device specs
# --asc : name of the asc file to generate
# --json : json file generated by synthesis
# --pcf : pin constraints file for i/o
# --freq : make sure we are not running at too fast a frequency
# --post-route : python script to run post routing that figures out where the BRAM blocks are placed
	nextpnr-ice40 --up5k --package sg48 --asc temp/controller_random_data.asc --json temp/controller.json --pcf controller.pcf
	# --pre-place src_python/pre_place.py \
	# --post-route src_python/get_bram_locations.py > temp/top_bram_placement.txt

# swap out random BRAM data with the file we want
# # the randomly generated data stops yosys from optimizing out EBRs
	# icebram temp/data.hex temp/custom_data.hex < temp/controller_random_data.asc > temp/controller.asc
# comment out the following line if you wish to use the debug data
	cp temp/controller_random_data.asc temp/controller.asc

# convert ASCII bitstream to binary
	icepack temp/controller.asc temp/controller.bin

# randomly generate hex data to fill entire BRAM with
# -g : generate
# -s : seed
# rest of params : width depth > file
temp/data.hex:
	icebram -g -s 0 16 4096 > temp/data.hex

temp/custom_data.hex: src_python/generate_bram.py
	python3 src_python/generate_bram.py

# submodules for our demo
temp/demo.bin: $(helper_verilog) demo/demo_controller.v demo/demo_top.v $(pnr_scripts) $(hex_data) temp
# synthesis
# -p : run the following yosys subcommands
# -q : only print warnings and errors
# yosys interprets the last verilog file listed as the top module
	yosys -q  -p 'synth_ice40 -json temp/demo.json' $(helper_verilog) demo/demo_controller.v demo/demo_top.v

# place and route
# -q : only print warnings and errors
# --hx1k --package tq144 : our device specs
# --asc : name of the asc file to generate
# --json : json file generated by synthesis
# --pcf : pin constraints file for i/o
# --pre-place : bind the ram blocks to specific tiles
# --post-route : python script to run post routing that figures out where the BRAM blocks are placed
	nextpnr-ice40 -q --hx1k --package tq144 --asc temp/demo.asc --json temp/demo.json --pcf controller.pcf \
	--pre-place src_python/pre_place.py \
	--post-route src_python/get_bram_locations.py > temp/demo_bram_placement.txt

# convert ASCII bitstream to binary
# -n : do not overwrite bram
	icepack temp/demo.asc temp/demo.bin -n

temp/debug.bin: $(helper_verilog) debug/debug_controller.v debug/top.v $(pnr_scripts) $(hex_data) temp
	yosys -q -p 'synth_ice40 -json temp/debug.json' $(helper_verilog) debug/debug_controller.v debug/top.v

	nextpnr-ice40 -q --hx1k --package tq144 --asc temp/debug_random_data.asc --json temp/debug.json --pcf controller.pcf \
	--pre-place src_python/pre_place.py \
	--post-route src_python/get_bram_locations.py > temp/debug_bram_placement.txt

	icebram temp/data.hex temp/custom_data.hex < temp/debug_random_data.asc > temp/debug.asc
# comment out the following line if you wish to use the debug data
	cp temp/debug_random_data.asc temp/debug.asc

	icepack temp/debug.asc temp/debug.bin -n

# make the temp directory if it does not already exist
temp:
	mkdir -p temp

# remove all files from the temp directory
clean:
	rm -rf temp/*